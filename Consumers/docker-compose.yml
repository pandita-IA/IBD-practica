services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
      
    networks:
      - consumer

  

  consumer_occupancy:
    image: bigdatainf/python:latest
    volumes:
      - ./consumer:/app
      - ./data:/data
      - ./wait-for-it.sh:/app/wait-for-it.sh
    working_dir: /app
    command: python -u occupancy_consumer.py
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=user
      - RABBITMQ_PASSWORD=password
    depends_on:
      - rabbitmq
    networks:
      - consumer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consumer_occupancy:5000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s


  consumer_power:
    image: bigdatainf/python:latest
    volumes:
      - ./consumer:/app
      - ./datnetworkNamea:/data
      - ./wait-for-it.sh:/app/wait-for-it.sh
    working_dir: /app
    command: python -u power_consumer.py
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=user
      - RABBITMQ_PASSWORD=password
    depends_on:
      - rabbitmq
    networks:
      - consumer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consumer_power:5000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s


  consumer_security:
    image: bigdatainf/python:latest
    volumes:
      - ./consumer:/app
      - ./data:/data
      - ./wait-for-it.sh:/app/wait-for-it.sh
    working_dir: /app
    command: python -u security_consumer.py
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=user
      - RABBITMQ_PASSWORD=password
    depends_on:
      - rabbitmq
    networks:
      - consumer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consumer_security:5000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s


  consumer_temperature:
    image: bigdatainf/python:latest
    volumes:
      - ./consumer:/app
      - ./data:/data
      - ./wait-for-it.sh:/app/wait-for-it.sh
    working_dir: /app
    command: python -u temperature_consumer.py
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USERNAME=user
      - RABBITMQ_PASSWORD=password
    depends_on:
      - rabbitmq
    networks:
      - consumer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://consumer_temperature:5000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s


  api-containers:
    image: bigdatainf/python:latest
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./api:/app
      - ./data:/data  # CSVs
      - ./wait-for-it.sh:/app/wait-for-it.sh
    working_dir: /app
    command: ["./wait-for-it.sh", "rabbitmq:5672", "--", "python", "-u", "api.py"]
    environment:
      - PATH_FILE_OCUPACION=/data/occupancy.csv
      - PATH_FILE_POWER=/data/power.csv
      - PATH_FILE_SECURITY=/data/security.csv
      - PATH_FILE_TEMPERATURE=/data/temperature.csv
    depends_on:
      - rabbitmq
    networks:
      - consumer
    ports:
      - "5001:5000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-containers:5000/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s


networks:
  consumer:
    driver: bridge
    external: true